{"version":3,"sources":["MarkDown.js","About.js","copy.js","App.js","index.js"],"names":["MarkDown","props","dangerouslySetInnerHTML","__html","marked","content","About","setOptions","langPrefix","highlight","code","hljs","highlightAuto","value","handleCopyClick","evt","children","target","parentElement","innerText","Array","from","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","alert","App","useEffect","console","log","querySelectorAll","forEach","div","copy","innerHTML","addEventListener","append","to","path","element","ReactDOM","render","getElementById"],"mappings":"wMAWe,SAASA,EAASC,GAC7B,OACI,qBAAKC,wBAA2B,CAAEC,OAAOC,iBAAOH,EAAMI,YCb/C,SAASC,EAAML,GAC1B,OACI,gCACI,6CACA,qGDAZG,SAAOG,WAAW,CACdC,WAAY,iBACZC,UAAW,SAASC,GAClB,OAAOC,IAAKC,cAAcF,EAAM,CAAC,OAAQ,eAAeG,S,kBEc9D,SAASC,EAAgBC,GAErB,IAAQC,EAAaD,EAAIE,OAAOC,cAAxBF,SAGAG,EAAcC,MAAMC,KAAKL,GAAU,GAAnCG,WA1BY,SAAAG,GACpB,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGV,MAAQS,EACXC,EAAGG,aAAa,WAAY,IAC5BH,EAAGI,MAAMC,SAAW,WACpBL,EAAGI,MAAME,KAAO,UAChBL,SAASM,KAAKC,YAAYR,GAC1B,IAAMS,EACFR,SAASS,eAAeC,WAAa,GAC/BV,SAASS,eAAeE,WAAW,GAE7CZ,EAAGa,SACHZ,SAASa,YAAY,QACrBb,SAASM,KAAKQ,YAAYf,GACtBS,IAEAR,SAASS,eAAeM,kBACxBf,SAASS,eAAeO,SAASR,IAWrCS,CAAgBtB,GAEhBuB,MAAMvB,GCFKwB,MArBf,WAKE,OAJAC,qBAAU,WD0BRC,QAAQC,IAAI,QAEOtB,SAASuB,iBAAiB,OAElCC,SAAQ,SAAAC,GAEf,IAAMC,EAAO1B,SAASC,cAAc,UACpCyB,EAAKC,UAAY,OAEjBD,EAAKE,iBAAiB,QAAStC,GAE/BmC,EAAII,OAAOH,QCnCd,IAGD,gCACE,8BACE,+BACE,6BAAI,cAAC,IAAD,CAAMI,GAAG,IAAT,oBACJ,6BAAI,cAAC,IAAD,CAAMA,GAAG,SAAT,0BAGR,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAACxD,EAAD,CAAUK,QAAQ,UAC3C,cAAC,IAAD,CAAOkD,KAAK,SAASC,QAAS,cAAClD,EAAD,a,OChBtCmD,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,W","file":"static/js/main.7a2c0b34.chunk.js","sourcesContent":["import { marked } from \"marked\";\r\nimport hljs from \"highlight.js\";\r\nimport 'highlight.js/styles/monokai-sublime.css';\r\n\r\nmarked.setOptions({\r\n    langPrefix: \"hljs language-\",\r\n    highlight: function(code) {\r\n      return hljs.highlightAuto(code, [\"html\", \"javascript\"]).value;\r\n    }\r\n});\r\n\r\nexport default function MarkDown(props){\r\n    return (\r\n        <div dangerouslySetInnerHTML = {{ __html:marked(props.content) }}></div>\r\n    );\r\n}","export default function About(props){\r\n    return (\r\n        <div>\r\n            <p>About Page. </p>\r\n            <p>This is my blog just for fun. I hope it will also can help others</p>\r\n        </div>\r\n    );\r\n}","const copyToClipboard = str => {\r\n    const el = document.createElement(\"textarea\") // Create a <textarea> element\r\n    el.value = str // Set its value to the string that you want copied\r\n    el.setAttribute(\"readonly\", \"\") // Make it readonly to be tamper-proof\r\n    el.style.position = \"absolute\"\r\n    el.style.left = \"-9999px\" // Move outside the screen to make it invisible\r\n    document.body.appendChild(el) // Append the <textarea> element to the HTML document\r\n    const selected =\r\n        document.getSelection().rangeCount > 0 // Check if there is any content selected previously\r\n            ? document.getSelection().getRangeAt(0) // Store selection if found\r\n            : false // Mark as false to know no selection existed before\r\n    el.select() // Select the <textarea> content\r\n    document.execCommand(\"copy\") // Copy - only works as a result of a user action (e.g. click events)\r\n    document.body.removeChild(el) // Remove the <textarea> element\r\n    if (selected) {\r\n        // If a selection existed before copying\r\n        document.getSelection().removeAllRanges() // Unselect everything on the HTML document\r\n        document.getSelection().addRange(selected) // Restore the original selection\r\n    }\r\n}\r\n\r\nfunction handleCopyClick(evt) {\r\n    // get the children of the parent element\r\n    const { children } = evt.target.parentElement\r\n    // grab the first element (we append the copy button on afterwards, so the first will be the code element)\r\n    // destructure the innerText from the code block\r\n    const { innerText } = Array.from(children)[0]\r\n    // copy all of the code to the clipboard\r\n    copyToClipboard(innerText)\r\n    // alert to show it worked, but you can put any kind of tooltip/popup to notify it worked\r\n    alert(innerText)\r\n}\r\n\r\nexport default function () {\r\n    console.log(\"run \");\r\n    // get the list of all highlight code blocks\r\n    const highlights = document.querySelectorAll(\"pre\")\r\n\r\n    highlights.forEach(div => {\r\n        // create the copy button\r\n        const copy = document.createElement(\"button\")\r\n        copy.innerHTML = \"Copy\"\r\n        // add the event listener to each click\r\n        copy.addEventListener(\"click\", handleCopyClick)\r\n        // append the copy button to each code block\r\n        div.append(copy)\r\n    });\r\n\r\n}","import React, { useEffect } from \"react\";\nimport MarkDown from \"./MarkDown\";\nimport About from \"./About\";\nimport { Routes, Route, Link } from \"react-router-dom\";\nimport setCopy from \"./copy\";\n\n//父组件\nfunction App() {\n  useEffect(()=>{\n    setCopy();\n  }, []);\n\n  return (\n    <div>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li> \n          <li><Link to=\"/about\">About</Link></li>\n        </ul>\n      </nav>\n      <Routes>\n        <Route path=\"/\" element={<MarkDown content=\"abc\"></MarkDown>}></Route>\n        <Route path=\"/about\" element={<About></About>}></Route>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport pre from './pre.css'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}